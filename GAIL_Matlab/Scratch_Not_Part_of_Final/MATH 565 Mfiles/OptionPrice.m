%Computing prices of Asian and American options% requires OptionOutput.m optprice.m payoff.m samplepath.m%          exactprice.m%clear all%% Parameter set-upsample.type='sobol';   %iid = i.i.d. random sampling   %sobol =  a quasi-random sequencesample.N=1e5; %number of stock pathssample.d=32; %number of trading periodssample.s=8; %number of eigenfunctions in Karhunen-Loevesample.T=1; %final time in yearssample.anti=false; %antithetic variables or not (a Boolean variable)sample.import=false; %importance sampling or not (a Boolean variable)sample.meanshift=-.05; %scalar or vector shift of mean of normal random variableasset.modtype='BB';    %dgbm = discrete geometric Brownian motion   %KL = Karuhnen-Loeve expansion of geometric Brownian motion   %BB = Brownian bridge expansion of geometric Brownian motion   %stickydelta = dgbm with volatility smile and skew   %jump = jump diffusion model   %vg =  variance gammaasset.s0=70; %initial asset priceasset.sig=0.5; %volatilityasset.sigskew=0; %linear coefficient for volatility smileasset.sigsmile=0.1; %quadratic coefficient for volatility smileasset.r=0.01; %interest rateasset.ljump=0.2; %intensity of the jump processasset.ajump=0; %mean of jump magnitudeasset.bjump=0.2; %spread of jump magnitudeasset.vgbeta=0.5; %fatness of variance gamma processasset.control={}; %control variates   %euro = European option for discrete Brownian motion with or without   %          jumps   %gmean = geometric mean option for discrete Brownian motion   %priceT = asset price at time Toption.type='gmean';    %euro = European   %amer = American/Bermudan   %amean = Arithmetic mean   %gmean = Geometric mean   %upin = Up and In Barrier   %upout = Up and Out Barrier   %downin = Down and In Barrier   %downout = Down and Out Barrier   %look = Lookbackoption.exacttype={'gmean'};   %eurogbm = European with geometric Brownian motion   %eurojump = European with jump diffusion process   %gmean = geometric mean with geometric Brownian motionoption.strike=100; %strike priceoption.barrier=150; %barrieroutput.stockpath=false; %Plot stock pathsoutput.MCconverge=true; %Plot convergence of MC estimateoutput.numer=true; %Print numerical results%% Don't touch anything below this linesample.Nvec=(1:sample.N)';sample.delt=sample.T/sample.d; %width of time interval sample.tvec=(0:sample.d)*sample.delt; %vector of time valueswhe=strcmp('euro',asset.control);whg=strcmp('gmean',asset.control);if strcmp('dgbm',asset.modtype);     if any(whe); asset.control(whe)={'eurogbm'}; endelseif strcmp('jump',asset.modtype)    if any(whe); asset.control(whe)={'eurojump'}; end    if any(whg); asset.control(whg)=''; end %can't do geometric mean exactly for non-dgbmelse    if any(whe); asset.control(whe)=''; end %can't do European mean exactly for non-dgbm    if any(whg); asset.control(whg)=''; end %can't do geometric mean exactly for non-dgbmendif numel(option.exacttype)>0;    exprice=exactprice(sample,asset,option);end%% Generating asset pathst0=clock;[smat,sample,asset]=samplepath(sample,asset,option);%% Compute option disounted payoff[pay,option]=payoff(smat,sample,asset,option);%% Compute option price from payoffsprice=optprice(pay,sample,asset,option);timetaken=etime(clock,t0); %how long does computation take%% OutputOptionOutput