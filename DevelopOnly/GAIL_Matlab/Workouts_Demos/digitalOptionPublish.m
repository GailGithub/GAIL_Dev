%% Digital Option in Matlab
% An option whose payout is fixed after the underlying stock exceeds 
% the predetermined threshold or strike price. It is the type of option 
% in which the payoff can take only two possible outcomes, either 
% some fixed monetary amount or nothing at all.
% 
% There are two different types of Digital Options called _Cash_ and
% _Asset_ and both exists for calls and puts.


%% Exact price of the digital option 
% When the underlying stock is assumed to follow the Black Scholes model or
% geometric Brownian motion model, there are formulas for the exact price
% of the digital option in terms of the standard Gaussian distribution
% function.  Let
%
% \begin{gather*} \Phi(x)
% =\frac{1}{\sqrt{(2\pi)}}\int_{-\infty}^{x}e^{-\frac{1}{2}z^2} \, {\rm
% d}z, \\ 
% d_1=\frac{\ln \Bigl(\frac{S_0}{K} \Bigr)+(r-q+\sigma^2/2)T}{\sigma\sqrt{T}} \\
% d_2=d_1-\sigma\sqrt{T}
% \end{gather*}
%
% Where:
%
% \(S_0\) - initial stock price
%
% _K_ - strike price
%
% _T_ - time to maturity
%
% _q_ - dividend rate
%
% _r_ - risk-free interest rate
%
% $\sigma$ - volatility
%
% $\Phi$ - cumulative distribution function of the normal distribution
%
% Then the digital option prices are given by
% 
% \[
% \begin{array}{rcc}
% & \text{Call}  & \text{Put} \\
% \text{Cash-or-nothing} & e^{-rT}\Phi(d_2) & e^{-rT}\Phi(-d_2) \\
% \text{Asset-or-nothing} & S_0e^{-qT}\Phi(d_1) & S_0e^{-qT}\Phi(-d_1)
% \end{array}
% \]


%% Example of pricing digital option for cash
% _optPrice_ is a MATLAB(R) class that generates the prices for options
% from Independent Identically Distributed Monte Carlo - _IID_MC_ method. _optPrice_ uses _optPayoff_ parameters, hence _optPayoff_
% uses _assePath_ parameters and this one uses _brownianMotion_ parameters
% and so on.
%
% The first step is to create an _input_ structure saying the parameters that 
% we want to analyze.
%
% Creating the _input_ structure

%Payoff Parameters
input.payoffParam.optType = {'digital'};      %Defining the Option Type
input.payoffParam.putCallType = {'call'};     %Defining the Option Type
input.payoffParam.cashAssetType = {'cash'};   %Defining the Digital Option Type
input.payoffParam.strike = 12;                %Defining the Strike Price as $12.00

%Asset Path Parameters
input.assetParam.initPrice = 9;               %Defining the Inicial Stock Price as $9.00
input.assetParam.interest = 0.01;             %Defining Interest Rate as 1%
input.assetParam.volatility = 0.5;            %Defining the Volatility as 50%

%Option Price Parameters
input.priceParam.absTol = 0.01;               %Defining the Absolute Tolerance as 1%

%Stochastic Process
input.timeDim.timeVector = (0.25:0.25:1);     %Defining the Time as four trimesters.

%%
% _DigOption1_ is the _optPrice_ class

tic, DigOption1 = optPrice(input), toc
%%
% From the above formulas, the Exact Price for _DigOption1_ is:
exactResult_DigOption1 = DigOption1.exactPrice
%%
% And now, in order to compare the price from the formulas and the price
% from the Monte Carlo method for Finance, the function _genOptPrice_ is
% called.
%
% _mcResult_DigOption1_ is the price of the option, generated by IID Monte
% Carlo.

tic, mcResult_DigOption1 = genOptPrice(DigOption1), toc
%% 
% As it can be seen the _exactPrice_ for _DigOption1_ is the same value of
% the _IID_MC_ method with 0.01 as absolute tolerance. 

%% Example of pricing digital option for asset
%
% Creating the _input2_ structure

%Payoff Parameters
input2.payoffParam.optType = {'digital'};      %Defining the Option Type
input2.payoffParam.putCallType = {'call'};     %Defining the Option Type
input2.payoffParam.cashAssetType = {'asset'};  %Defining the Digital Option Type
input2.payoffParam.strike = 15;                %Defining the Strike Price as $15.00

%Asset Path Parameters
input2.assetParam.initPrice = 11;              %Defining the Inicial Stock Price as $11.00
input2.assetParam.interest = 0.01;             %Defining Interest Rate as 1%
input2.assetParam.volatility = 0.65;           %Defining the Volatility as 65%

%Option Price Parameters
input2.priceParam.absTol = 0.01;               %Defining the Absolute Tolerance as 1%

%Stochastic Process
input2.timeDim.timeVector = [1 2 3];           %Defining the Time as three years.
%%
% _DigOption2_ is the _optPrice_ class

tic, DigOption2 = optPrice(input2), toc
%%
% From the above formulas, the Exact Price for _DigOption2_ is:
exactResult_DigOption2 = DigOption2.exactPrice
%%
% Now comparing, _mcResult_DigOption2_ is the price of the option, generated by IID Monte Carlo

tic, mcResult_DigOption2 = genOptPrice(DigOption2), toc

%% References
%
% "Binary Option." Wikipedia. Accessed June 5, 2015.

