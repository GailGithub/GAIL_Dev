%% Digital Option in Matlab
% An option whose payout is fixed after the underlying stock exceeds 
% the predetermined strike price. It is the type of option 
% in which the payoff can take only two possible outcomes, either 
% some fixed monetary amount or nothing at all, the characteristic
% function below describes it in math terms:
%
% \[\mathbb{1}_{[K,\infty)}(S_{(T)})=
% \begin{cases}
% 1, & S_{(T)} > K \\
% 0, & S_{(T)} \leq K\\
% \end{cases}\]
% 
% If the Stock Price at the maturity time \(S_{(T)}\) is above
% the Strike Price \(K\), the payoff of the option is $1.00. It does not
% depend if it closes $0.01 or $100.00 above the line, the digital option is 
% still worth $1.00. If \(S_{(T)}\) closes below the underlying, then the option
% expires worthless, or nothing at all.
% 
% There are two different types of Digital Options called _Cash_ and
% _Asset_ and both exists for calls and puts.


%% Exact price of the digital option 
% When the underlying stock is assumed to follow the Black Scholes model or
% geometric Brownian motion model, there are formulas for the exact price
% of the digital option in terms of the standard Gaussian distribution
% function.  Let
%
% \[
% \begin{array}{rcc}
% & \text{Call}  & \text{Put} \\
% \text{Cash-or-nothing} & e^{-rT}\Phi(d_2) & e^{-rT}\Phi(-d_2) \\
% \text{Asset-or-nothing} & S_0e^{-qT}\Phi(d_1) & S_0e^{-qT}\Phi(-d_1)
% \end{array}
% \]
%
% \begin{gather*} \Phi(x)
% =\frac{1}{\sqrt{2\pi}}\int_{-\infty}^{x}e^{-\frac{1}{2}z^2} \, {\rm
% d}z, \\ 
% d_1=\frac{\ln \Bigl(\frac{S_0}{K} \Bigr)+(r-q+\sigma^2/2)T}{\sigma\sqrt{T}} \\
% d_2=d_1-\sigma\sqrt{T}
% \end{gather*}
%
% under the following notation:
%
% \begin{align*}
% \Phi(x) & =\frac{1}{\sqrt{2\pi}}\int_{-\infty}^{x}e^{-\frac{1}{2}z^2} \, {\rm
% d}z = \text{cumulative distribution function of the normal distribution} \\ 
% d_1 &=\frac{\ln \Bigl(\frac{S_0}{K} \Bigr)+(r-q+\sigma^2/2)T}{\sigma\sqrt{T}} \\
% d_2 &=d_1-\sigma\sqrt{T} \\
% S_0 & = \text{initial stock price} \\
% K & = \text{strike price}
% \end{align*}
%
% 
%
% \(T\) - maturity time
%
% \(q\) - dividend rate
%
% \(r\) - risk-free interest rate
%
% $\sigma$ - volatility
%
% $\Phi$ - cumulative distribution function of the normal distribution
%
% Then the digital option prices are given by
% 
% \[
% \begin{array}{rcc}
% & \text{Call}  & \text{Put} \\
% \text{Cash-or-nothing} & e^{-rT}\Phi(d_2) & e^{-rT}\Phi(-d_2) \\
% \text{Asset-or-nothing} & S_0e^{-qT}\Phi(d_1) & S_0e^{-qT}\Phi(-d_1)
% \end{array}
% \]

close all
clearvars

%% Example of pricing digital option for cash
% _optPrice_ is a MATLAB(R) class that generates the prices for options
% from Independent Identically Distributed Monte Carlo - _IID_MC_ method. _optPrice_ uses _optPayoff_ parameters, hence _optPayoff_
% uses _assePath_ parameters and this one uses _brownianMotion_ parameters
% and so on.
%
% The first step is to create an _input_ structure saying the parameters that 
% we want to analyze.
%
% Creating the _input_ structure

%Payoff Parameters
input.payoffParam.optType = {'digitalcash'};   %Defining the Option Type
input.payoffParam.putCallType = {'call'};      %Defining the Option Type
input.payoffParam.strike = 12;                 %Defining the Strike Price as $12.00
input.payoffParam.digitalPay = 1.1;            %Defining the Digital Pay (profit) as 82% of the Investment

%Asset Path Parameters
input.assetParam.initPrice = 11;                %Defining the Inicial Stock Price as $9.00
input.assetParam.interest = 0.01;              %Defining Interest Rate as 1%
input.assetParam.volatility = 0.5;             %Defining the Volatility as 50%

%Option Price Parameters
input.priceParam.absTol = 0;                %Defining the Absolute Tolerance as 1%
input.priceParam.relTol = 0.01;                %Defining the Absolute Tolerance as 1%

%Stochastic Process
input.timeDim.timeVector = 1;      %Defining the Time as four trimesters.

%%
% _DigOption1_ is the _optPrice_ class

tic, DigOption1 = optPrice(input), toc
%%
% From the above formulas, the Exact Price for _DigOption1_ is:
exactResult_DigOption1 = DigOption1.exactPrice
%%
% And now, in order to compare the price from the formulas and the price
% from the Monte Carlo method for Finance, the function _genOptPrice_ is
% called.
%
% _mcResult_DigOption1_ is the price of the option, generated by IID Monte
% Carlo.

tic, mcResult_DigOption1 = genOptPrice(DigOption1), toc
%% 
% As it can be seen the _exactPrice_ for _DigOption1_ is the same value of
% the _IID_MC_ method with 0.01 as absolute tolerance. 

%%
% Plot the payoffs
plot(DigOption1,1e4)


%% Example of pricing digital option for asset
%
% Creating the _input2_ structure

% %Payoff Parameters
% input2.payoffParam.optType = {'digitalasset'}; %Defining the Option Type
% input2.payoffParam.putCallType = {'call'};     %Defining the Option Type
% input2.payoffParam.strike = 5.85;              %Defining the Strike Price as $15.00
% 
% %Asset Path Parameters
% input2.assetParam.initPrice = 4.50;            %Defining the Inicial Stock Price as $11.00
% input2.assetParam.interest = 0.01;             %Defining Interest Rate as 1%
% input2.assetParam.volatility = 0.30;           %Defining the Volatility as 65%
% 
% %Option Price Parameters
% input2.priceParam.absTol = 0.01;               %Defining the Absolute Tolerance as 1%
% 
% %Stochastic Process
% input2.timeDim.timeVector = [1 2 3];           %Defining the Time as three years.
% %%
% % _DigOption2_ is the _optPrice_ class
% 
% tic, DigOption2 = optPrice(input2), toc

DigOption2 = DigOption1;
DigOption2.payoffParam.optType = {'digitalasset'}


%%
% From the above formulas, the Exact Price for _DigOption2_ is:
exactResult_DigOption2 = DigOption2.exactPrice
%%
% Now comparing, _mcResult_DigOption2_ is the price of the option, generated by IID Monte Carlo

tic, mcResult_DigOption2 = genOptPrice(DigOption2), toc


% Plot the payoffs
figure; plot(DigOption2,1e4)

%% References
%
% "Binary Option." Wikipedia. Accessed June 5, 2015.
%
% "What Are Binary Options?" Binary Options. Accessed June 16, 2015.



